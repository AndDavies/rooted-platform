-- Insert sample HRV data backfill generated by Garmin
-- Assumes a Garmin connection exists for wearable_user_id '00c969af-eb5d-4838-acd1-5f6362e24d60'.
-- Adjust wearable_user_id if different.

begin;

with conn as (
  select id
  from wearable_connections
  where wearable_user_id = '00c969af-eb5d-4838-acd1-5f6362e24d60'
    and wearable_type = 'garmin'
  order by id
  limit 1
),
json_input as (
  select '[{"summaryId":"sd3cf3803-6854ead0","calendarDate":"2025-06-20","lastNightAvg":84,"lastNight5MinHigh":100,"startTimeInSeconds":1750395600,"hrvValues":{"300":87,"600":99,"900":86,"1200":100,"1500":64,"1800":67,"2100":86}},{"summaryId":"sd3cf3803-68563c50","calendarDate":"2025-06-21","lastNightAvg":82,"lastNight5MinHigh":100,"startTimeInSeconds":1750482000,"hrvValues":{"300":85,"600":100,"900":63}}]'::jsonb as blob
),
expanded as (
  select jsonb_array_elements(blob) as obj
  from json_input
),
nightly as (
  select
    (select id from conn) as connection_id,
    'hrv_rmssd' as metric_type,
    (obj->>'lastNightAvg')::numeric as value,
    'ms' as unit,
    (obj->>'calendarDate')::date as timestamp
  from expanded
),
per_epoch as (
  select
    (select id from conn) as connection_id,
    'hrv_rmssd' as metric_type,
    (kv.value)::numeric as value,
    'ms' as unit,
    to_timestamp((obj->>'startTimeInSeconds')::bigint + (kv.key)::int) at time zone 'UTC' as timestamp
  from expanded,
       lateral jsonb_each(obj->'hrvValues') as kv(key, value)
)
insert into wearable_data (connection_id, metric_type, value, unit, timestamp, source)
select * , 'garmin' as source from (
  select connection_id, metric_type, value, unit, timestamp from nightly
  union all
  select connection_id, metric_type, value, unit, timestamp from per_epoch
) t
on conflict (connection_id, metric_type, timestamp) do nothing;

commit; 